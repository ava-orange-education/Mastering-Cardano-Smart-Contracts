minting ticket

/*
 The minting policy can either mint or burn an ticket
 */
 enum Redeemer { 
    Mint 
    Burn
}

const TX_ID: ByteArray = #abc123
const tx_id: TxId = TxId::new(TX_ID)
const TX_IDX: Int = 0
const output_id: TxOutputId = TxOutputId::new(tx_id, TX_IDX)
const TN: String = ""
const QTY: Int = 1

func main(redeemer: Redeemer, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();
    tn_assetclass: AssetClass = AssetClass::new(
        mph, 
        TN.encode_utf8()
    );
    value_minted: Value = tx.minted;
    redeemer.switch {
        Mint => {
            // Check that contract parameter UTXO is included in the inputs
            // and that the minted amount is equal to the quanty given
            (value_minted == Value::new(tn_assetclass, QTY)).trace("NFT1: ") &&
            tx.inputs.any((input: TxInput) -> Bool {
                                (input.output_id == output_id).trace("NFT2: ")
                                }
                            ) 
        },
        Burn => {
            // Allow any quantity of the minting policy to be burned in a transaction
            (value_minted.get(tn_assetclass) < 0).trace("NFT3: ")
        }
    } 
}