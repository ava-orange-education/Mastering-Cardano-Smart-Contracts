minting ticket

 enum Redeemer { 
    Mint 
    Burn
}
const TX_ID: ByteArray = #abc123
const txId: TxId = TxId::new(TX_ID)
const TX_IDX: Int = 0
const outputId: TxOutputId = TxOutputId::new(txId, TX_IDX)
func main(redeemer: Redeemer, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();
    tt_assetclass: AssetClass = AssetClass::new(
        mph, "Thread Token".encode_utf8()
    );
    value_minted: Value = tx.minted;
    redeemer.switch {
        Mint => {
            // Only mint 1 asset and confirm TxId and TxIdx are in inputs
            (value_minted == Value::new(tt_assetclass, 1)).trace("TTP1: ") &&
            tx.inputs.any((input: TxInput) -> Bool {
                                (input.output_id == outputId).trace("TTP2: ")
                                }
                            ) 
        },
        Burn => {
            // Allow the thread token to be burned
            tx.minted.get_policy(mph).all( (_, amount: Int) -> Bool {
                amount == -1
            }).trace("TTP3: ")
        }
    } 
}

