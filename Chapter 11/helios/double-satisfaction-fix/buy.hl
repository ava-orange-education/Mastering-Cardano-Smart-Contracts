spending buy

struct Datum {
    sellerPKH: PubKeyHash
    price: Value
}
enum Redeemer {
    Buy { buyerPKH: PubKeyHash }
}
const NFT_TN: ByteArray = #
const NFT_MPH: MintingPolicyHash = MintingPolicyHash::new(#)
const nftAssetClass: AssetClass = AssetClass::new(NFT_MPH, NFT_TN)
const nftValue: Value = Value::new(nftAssetClass, 1)

func totalValue(outputs: []TxOutput) -> Value {
    if (outputs.length == 0) {
        Value::ZERO
    } else {
        outputs.get(0).value + totalValue(outputs.tail)
    }
}
func main(datum: Datum, redeemer: Redeemer, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    redeemer.switch {
        red: Buy => {
            // Amount sent to seller must be great or equal to price
            (tx.value_sent_to(datum.sellerPKH) >= datum.price).trace("BVL1: ") &&
            (tx.value_sent_to(red.buyerPKH).get_assets() == nftValue).trace("BVL2: ") &&
            (totalValue(tx.outputs) - nftValue).get_assets().is_zero().trace("BVL3: ")
        }
    }    
}


